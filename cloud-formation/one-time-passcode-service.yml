AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy a service on AWS Fargate, hosted in two public subnets and accessible via a public load balancer.
  Derived from a template at https://github.com/nathanpeck/aws-cloudformation-fargate.
Parameters:
  MongoConnectionString:
    Type: String
    Description: Connection string of the mongo database the service should connect to
  EnvironmentName:
    Type: String
    Default: idv-test
    Description: The name of the environment to add this service to
  StackName:
    Type: String
    Default: idv-test-network
    Description: The name of the networking stack that
      these resources are put into.
  ServiceName:
    Type: String
    Default: idv-one-time-passcode
    Description: A human-readable name for the service.
  HealthCheckPath:
    Type: String
    Default: /idv-one-time-passcode/actuator/health
    Description: Path to perform the healthcheck on each instance.
  HealthCheckIntervalSeconds:
    Type: Number
    Default: 60
    Description: Number of seconds to wait between each health check.
  ImageUrl:
    Type: String
    Default: michaelruocco/idv-one-time-passcode-spring-app:latest
    Description: The url of a docker image that will handle incoming traffic.
  ContainerPort:
    Type: Number
    Default: 80
    Description: The port number the application inside the docker container
      is binding to.
  ContainerCpu:
    Type: Number
    Default: 1024
    Description: How much CPU to give the container. 1024 is 1 CPU.
  ContainerMemory:
    Type: Number
    Default: 2048
    Description: How much memory in megabytes to give the container.
  Path:
    Type: String
    Default: /idv-one-time-passcode/
    Description: A path on the public load balancer that this service
      should be connected to.
  DesiredCount:
    Type: Number
    Default: 1
    Description: How many copies of the service task to run.
  Role:
    Type: String
    Default: "ecsTaskExecutionRole"
    Description: (Optional) An IAM role to give the service's containers if the code within needs to
      access other AWS resources like S3 buckets, DynamoDB tables, etc

Conditions:
  HasCustomRole: !Not [ !Equals [!Ref 'Role', ''] ]

Resources:

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: !Ref 'HealthCheckIntervalSeconds'
      HealthCheckPath: !Ref 'HealthCheckPath'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      Name: !Ref 'ServiceName'
      Port: !Ref 'ContainerPort'
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'VPCId']]

  LoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'TargetGroup'
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values:
            - !Sub '${Path}*'
      ListenerArn:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'PublicListener']]
      Priority: 2

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref 'ServiceName'
      Cpu: !Ref 'ContainerCpu'
      Memory: !Ref 'ContainerMemory'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'ECSTaskExecutionRole']]
      TaskRoleArn:
        Fn::If:
          - 'HasCustomRole'
          - !Ref 'Role'
          - !Ref "AWS::NoValue"
      ContainerDefinitions:
        - Name: !Ref 'ServiceName'
          Cpu: !Ref 'ContainerCpu'
          Memory: !Ref 'ContainerMemory'
          Image: !Ref 'ImageUrl'
          PortMappings:
            - ContainerPort: !Ref 'ContainerPort'
          Environment:
            - Name: ENVIRONMENT
              Value: !Ref 'EnvironmentName'
            - Name: MONGO_CONNECTION_STRING
              Value: !Ref 'MongoConnectionString'
            - Name: REQUEST_LOGGING_ENABLED
              Value: true
            - Name: RESPONSE_LOGGING_ENABLED
              Value: true
            - Name: SERVER_SERVLET_CONTEXT_PATH
              Value: !Ref 'Path'
            - Name: CONTEXT_URI
              Value: http://idv-test-1672227626.eu-west-1.elb.amazonaws.com/idv-context
            - Name: AWS_SNS_ENDPOINT_URI
              Value: https://sns.eu-west-1.amazonaws.com
            - Name: AWS_SES_ENDPOINT_URI
              Value: https://email.eu-west-1.amazonaws.com
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group: !Sub /aws/ecs/${EnvironmentName}
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Ref 'ServiceName'

  Service:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerRule
    Properties:
      ServiceName: !Ref 'ServiceName'
      Cluster:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'ClusterName']]
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: !Ref 'DesiredCount'
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - Fn::ImportValue:
                !Join [':', [!Ref 'StackName', 'ECSSecurityGroup']]
          Subnets:
            - Fn::ImportValue:
                !Join [':', [!Ref 'StackName', 'PublicSubnetOne']]
            - Fn::ImportValue:
                !Join [':', [!Ref 'StackName', 'PublicSubnetTwo']]
      TaskDefinition: !Ref 'TaskDefinition'
      LoadBalancers:
        - ContainerName: !Ref 'ServiceName'
          ContainerPort: !Ref 'ContainerPort'
          TargetGroupArn: !Ref 'TargetGroup'