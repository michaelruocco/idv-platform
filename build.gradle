plugins {
    id "com.github.ben-manes.versions" version "0.38.0"
    id "nebula.lint" version "16.17.1"
    id "com.avast.gradle.docker-compose" version "0.14.2"
    id "com.moowork.node" version "1.3.1"
    id "com.github.michaelruocco.gradle-postman-runner" version "0.1.3"
    id "com.github.michaelruocco.rest-polling" version "0.1.1"
}

gradleLint {
    rules = ["all-dependency"]
    alwaysRun = false
}

def awsEnv = toAwsEnv("idv-test")
def serviceName = getOrDefaultProperty("deployServiceName", "")
def serviceVersion = getOrDefaultProperty("deployServiceVersion", "")

dockerCompose {
    startedServices = ["idv-one-time-passcode-app", "idv-context-spring-app"]
    environment.put "OTP_APP_VERSION", calculateVersion("idv-one-time-passcode", serviceName, serviceVersion)
    environment.put "CONTEXT_APP_VERSION", calculateVersion("idv-context", serviceName, serviceVersion)
}

postman {
    collections = fileTree(dir: "postman", include: "*_collection.json")
}

task localEnvPostman(type: uk.co.mruoc.postman.task.PostmanTask) {
    environment = file("postman/idv-local.postman_environment.json")
}

task testEnvPostman(type: uk.co.mruoc.postman.task.PostmanTask) {
    environment = file("postman/idv-test.postman_environment.json")
    envVars = [
            "authClientId" : findProperty("auth.client.id"),
            "authClientSecret" : findProperty("auth.client.secret")
    ]
}

pollRestGetEndpoint {
    uri = toUrl(awsEnv, serviceName)
    minConsecutiveValidRequests = 3
    expectedValues = ["build.version": serviceVersion]
    atMost = "PT10S"
}

def getOrDefaultProperty(String name, String defaultValue) {
    if (project.hasProperty(name)) {
        return project.getProperty(name)
    }
    return defaultValue
}

static toAwsEnv(name) {
    return [
            "urlTemplate"   : "http://${name}-1405014929.eu-west-1.elb.amazonaws.com/%s/actuator/info",
            "ecsClusterName": name
    ]
}

static calculateVersion(deployName, name, version) {
    if (name == deployName) {
        return version
    }
    return "latest"
}

static toUrl(awsEnv, name) {
    return String.format(awsEnv["urlTemplate"], name)
}

